#!/usr/bin/env bash

# Error codes + association:
# 1 - Running as root
# 2 - Unsupported platform
# 3 - Dependency issue
# 4 - Unsupported shell
# 5 - Setting $THEOS failed
# 6 - Theos clone failed
# 7 - Toolchain install failed
# 8 - SDK install failed
# 9 - Checkra1n '/opt' setup failed
# 10 - WSL1 fakeroot->fakeroot-tcp failed
# 11 - Enabling Linux binary compat on FreeBSD failed

set -e

# Pretty print
special() {
	printf "\e[0;34m==> \e[1;34mTheos Installer:\e[m %s\n" "$1"
}

update() {
	printf "\n\e[0;36m==> \e[1;36m%s\e[m\n" "$1"
}

common() {
	printf "\n\e[0;37m==> \e[1;37m%s\e[m\n" "$1"
}

error() {
	printf "\e[0;31m==> \e[1;31m%s\e[m\n" "$1"
}


# Common vars
PLATFORM=$(uname)
CSHELL="${SHELL##*/}"
SHELL_ENV="unknown"
if [[ $CSHELL == sh || $CSHELL == bash || $CSHELL == dash ]]; then
	# Bash prioritizes bashrc > bash_profile > profile
	if [[ -f $HOME/.bashrc ]]; then
		SHELL_ENV="$HOME/.bashrc"
	elif [[ -f $HOME/.bash_profile ]]; then
		SHELL_ENV="$HOME/.bash_profile"
	else
		SHELL_ENV="$HOME/.profile"
	fi
elif [[ $CSHELL == zsh ]]; then
	# Zsh prioritizes zshenv > zprofile > zshrc
	if [[ -f $HOME/.zshenv ]]; then
		SHELL_ENV="$HOME/.zshenv"
	elif [[ -f $HOME/.zprofile ]]; then
		SHELL_ENV="$HOME/.zprofile"
	else
		SHELL_ENV="$HOME/.zshrc"
	fi
fi


# The work
theos_bool() {
	AFFIRMATIVE=(Y y YES yes TRUE true)
	if [[ ${AFFIRMATIVE[*]} =~ $1 ]]; then
		return 0
	else
		return 1
	fi
}

set_theos() {
	# Check for $THEOS env var
	update "Checking for \$THEOS environment variable..."
	if ! [[ -z $THEOS ]]; then
		update "\$THEOS is already set to '$THEOS'. Nothing to do here."
	else
		update "\$THEOS has not been set. Setting now..."

		if [[ $SHELL_ENV == unknown ]]; then
			error "Current shell ($CSHELL) is unsupported by this installer. Please set the THEOS environment variable to '~/theos' manually before proceeding."
			exit 4
		fi

		# Set $THEOS
		echo "export THEOS=~/theos" >> "$SHELL_ENV"
		export THEOS=~/theos
	fi
}

get_theos() {
	# Get Theos
	update "Checking for Theos install..."
	if [[ -d $THEOS && $(ls -A "$THEOS") ]]; then
		update "Theos appears to already be installed. Checking for updates..."
		$THEOS/bin/update-theos
	else
		update "Theos does not appear to be installed. Cloning now..."
		git clone --recursive https://github.com/kp7742/theos.git $THEOS \
			&& update "Git clone of Theos was successful!" \
			|| (error "Theos git clone command seems to have encountered an error. Please see the log above."; exit 6)
	fi
}

get_sdks() {
	# Get patched sdks
	update "Checking for patched SDKs..."
	if [[ -d $THEOS/sdks/ && $(ls -A "$THEOS/sdks/" | grep sdk) ]]; then
		update "SDKs appear to already be installed."
	else
		update "SDKs do not appear to be installed. Installing now..."
		curl -L https://api.github.com/repos/theos/sdks/tarball -o sdks.tar.gz
		TMP=$(mktemp -d)
		tar -xvf sdks.tar.gz --strip=1 -C $TMP
		mv $TMP/*.sdk $THEOS/sdks
		rm -r sdks.tar.gz $TMP

		if [[ -d $THEOS/sdks/ && $(ls -A "$THEOS/sdks/" | grep sdk) ]]; then
			update "SDKs successfully installed!"
		else
			error "Something appears to have gone wrong. Please try again."
			exit 8
		fi
	fi
}

linux() {
	# Determine distro
	DISTRO="unknown"
	if [[ -x $(command -v apt) ]]; then
		DISTRO="debian"
	fi

	# Dependencies
	update "Preparing to install dependencies. Please enter your password if prompted:"
	case $DISTRO in
		debian)
			pkg update
			pkg install -y build-essential fakeroot rsync curl perl zip git libxml2 \
				&& update "Dependencies have been successfully installed!" \
				|| (error "Dependency install command seems to have encountered an error. Please see the log above."; exit 3)
			;;
		*)
			error "The dependencies for your distro are unknown to this installer. Note that they will need to be determined before Theos can be installed and/or function properly."
			common "On Debian-based distros, the necessary dependencies are: build-essential fakeroot rsync curl perl git libxml2 and libtinfo5 (non-swift toolchain) or libz3-dev (swift toolchain)."
			common "Additional dependencies may also be required depending on what your distro provides."
			;;
	esac

	set_theos
	get_theos

	# Get a toolchain
	update "Checking for iOS toolchain..."
	if [[ -d $THEOS/toolchain/linux/iphone/ && $(ls -A "$THEOS/toolchain/linux/iphone") ]]; then
		update "A toolchain appears to already be installed."
	else
		update "A toolchain does not appear to be installed."
		stoolchain="n"
		if [[ -z $CI ]]; then
			read -p "Would you like your toolchain to support Swift (larger toolchain size) or not (smaller toolchain size)? [y/n]" stoolchain
		fi
		if theos_bool $stoolchain; then
			error "Looks like Swift toolchain is not supported yet."
			exit 7
		else
			case $DISTRO in
				debian)
					pkg install -y ncurses
					;;
			esac
			curl -LO https://github.com/kp7742/iOSToolchain/releases/download/main-update-33a8a17/iOSToolchain-aarch64.tar.xz
			tar -xvf iOSToolchain-aarch64.tar.xz -C $THEOS/toolchain/
			rm iOSToolchain-aarch64.tar.xz
		fi

		# Confirm that toolchain is usable
		if [[ -x $THEOS/toolchain/linux/iphone/bin/clang ]]; then
			update "Successfully installed the toolchain!"
		else
			error "Something appears to have gone wrong -- the toolchain is not accessible. Please try again."
			exit 7
		fi
	fi

	get_sdks
}

# Determine platform and start work
special "Starting install..."
common "Platform: $PLATFORM"
if [[ ${PLATFORM,,} == linux ]]; then
	linux
else
	error "'$PLATFORM' is currently unsupported by this installer and/or Theos."
	exit 2
fi
special "Theos has been successfully installed! Restart your shell and then run \$THEOS/bin/nic.pl to get started."
